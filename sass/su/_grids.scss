// Grids
// =====


/// Check if a grid is symmetrical
///
/// @access public
///
/// @param {List | Number} $columns - Columns
///
/// @return {Bool} -
///     Return `true` if the grid is symmetrical, `false` in other case
@function su-is-symmetrical (
  $columns: su-get('columns')
) {
  $columns: su-valid-columns($columns);
  @return if(type-of($columns) == 'number', true, false);
}


/// Find the number of columns in a given layout
///
/// @access public
///
/// @param {List | Number} $columns - Columns
///
/// @return {Number} -
///     Return the correct number of columns
@function su-count (
  $columns: su-get('columns')
) {
  $columns: su-valid-columns($columns);

  @if su-is-symmetrical($columns) {
    @return $columns;
  }

  @return length($columns);
}


/// Find the total sum of column units in a layout
///
/// @access public
///
/// @param {List | Number} $columns [su-get('columns')] -
///     The number of columns in the grid
/// @param {Float} $gutters [su-get('gutters')] -
///     The ratio of a gutter based on a column
/// @param {String | false} $spread [false] -
///     Either `narrow`, `wide` or `wider`
///
/// @return {Number} -
///     Return the total sum of column units in a layout
@function su-sum (
  $columns: su-get('columns'),
  $gutters: su-get('gutters'),
  $spread: su-get('spread')
) {
  $columns: su-valid-columns($columns);
  $gutters: su-valid-gutters($gutters);
  $spread: su-valid-spread($spread);

  $gutters: (su-count($columns) + $spread) * $gutters;

  @if not su-is-symmetrical($columns) {
    $column-sum: 0;

    @each $column in $columns {
      $column-sum: ($column-sum or 0) + $column;
    }

    @return $column-sum + $gutters;
  }

  @return $columns + $gutters;
}


/// Return a subset of columns at a given location
///
/// @access public
///
/// @param {Number} $span -
///     TBA
/// @param {Number} $location -
///     TBA
/// @param {Number | List} $columns [su-get('columns')] -
///     The number of columns in the grid
///
/// @return {List} -
///     Subset of columns at given location
@function su-slice (
  $span,
  $location: 1,
  $columns: su-get('columns')
) {
  $columns: su-valid-columns($columns);

  @if not su-is-symmetrical($columns) {
    $sub-columns: ();
    $end: $location + $span;

    @if $end > length($columns) {
      @error 'There are not `#{$span}` columns available '
        + 'from position `#{$location}`';
    }

    @for $i from $location to $end {
      $sub-columns: append($sub-columns, nth($columns, $i));
    }

    @return $sub-columns;
  }

  @return $span;
}


/// Su main function
///
/// @access public
///
/// @param {Number} $span -
///     TBA
/// @param {Number} $location -
///     TBA
/// @param {Number | List} $columns -
///     The number of columns in the grid
/// @param {Float} $gutters -
///     The ratio of a gutter based on a column
/// @param {String} $spread -
///     Either `narrow`, `wide` or `wider`
///
/// @return {Number} -
///     Return the total sum of column units in a layout
@function su (
  $span,
  $location: 1,
  $columns: su-get('columns'),
  $gutters: su-get('gutters'),
  $spread: su-get('spread')
) {
  $columns: su-valid-columns($columns);
  $gutters: su-valid-gutters($gutters);
  $span: su-slice($span, $location, $columns);

  @return su-sum($span, $gutters, $spread);
}
