// Grids
// =====
// - su-span [function]
// - su-gutter [function]
// - su-sum [function]
// - su-slice [function]


// Su Span
// -------
/// Get a usable span length in either relative or static units.
///
/// @group su
///
/// @param {Number | List} $span -
///   The number or list of grid columns to span.
/// @param {List} $columns -
///   The list of columns available.
/// @param {Number} $gutters -
///   The length of a gutter in column-comparable units.
/// @param {0 | 1 | -1 | 'narrow' | 'wide' | 'wider'} $spread -
///   The number of gutters in relation to span-columns:
///   either `narrow` (-1), `wide` (0), or `wider` (1).
/// @param {0 | 1 | -1 | 'narrow' | 'wide' | 'wider'} $container-spread [$spread] -
///   The number of gutters in relation to container-columns:
///   either `narrow` (-1), `wide` (0), or `wider` (1).
/// @param {Integer} $location [1] -
///   Optional position of sub-span among full set of columns.
///
/// @return {Length} -
///   The length of a span on the grid.
@function su-span (
  $span,
  $columns,
  $gutters,
  $spread,
  $container-spread: $spread,
  $location: 1
) {
  $columns: su-valid-columns($columns);
  $gutters: su-valid-gutters($gutters);
  $spread: su-valid-spread($spread);

  @if (type-of($span) == 'number') {
    @if unitless($span) {
      $location: su-valid-location($span, $location, $columns);
      $span: su-slice($span, $columns, $location, $validate: false);
    } @else {
      @return $span;
    }
  }

  $span: su-sum($span, $gutters, $spread, $validate: false);

  @if unitless($span) {
    $container-spread: su-valid-spread($container-spread);
    $container: su-sum($columns, $gutters, $container-spread, $validate: false);
    @return percentage($span / $container);
  }

  @return $span;
}


// Su Gutter
// ---------
/// Get a usable gutter length in either relative or static units.
///
/// @group su
///
/// @param {List} $columns -
///   List of columns in the grid.
/// @param {Number} $gutters -
///   The length of a gutter in column-comparable units.
/// @param {0 | 1 | -1 | 'narrow' | 'wide' | 'wider'} $container-spread -
///   The number of gutters in relation to container-columns:
///   either `narrow` (-1), `wide` (0), or `wider` (1).
///
/// @return {Number} -
///   The length of one gutter in a grid.
@function su-gutter (
  $columns,
  $gutters,
  $container-spread
) {
  @if (type-of($gutters) == 'number') {
    @if ($gutters == 0) or (not unitless($gutters)) {
      @return $gutters;
    }
  }

  $container: su-sum($columns, $gutters, $container-spread);
  @return percentage($gutters / $container);
}


// Su Sum
// ------
/// Get the total sum of column-units in a layout.
///
/// @group su
///
/// @param {List} $columns -
///   List of columns in the grid
/// @param {Number} $gutters -
///   The length of a gutter in column-comparable units.
/// @param {0 | 1 | -1 | 'narrow' | 'wide' | 'wider'} $spread -
///   The number of gutters in relation to columns:
///   either `narrow` (-1), `wide` (0), or `wider` (1).
/// @param {Bool} $validate [true] -
///   Check that arguments are valid before proceeding.
///
/// @return {Number} -
///   Total sum of column-units in a grid.
@function su-sum (
  $columns,
  $gutters,
  $spread,
  $validate: true
) {
  @if $validate {
    $columns: su-valid-columns($columns);
    $gutters: su-valid-gutters($gutters);
    $spread: su-valid-spread($spread);
  }

  $gutter-sum: (ceil(length($columns)) + $spread) * $gutters;
  $column-sum: 0;

  @each $column in $columns {
    $column-sum: $column-sum + $column;
  }

  @if comparable($column-sum, $gutter-sum) {
    @if (unit($column-sum) == unit($gutter-sum)) or not unitless($column-sum) {
      @return $column-sum + $gutter-sum;
    }
  }

  @return $column-sum;
}


// Su Slice
// --------
/// Get a subset of columns at a given location.
///
/// @group su
///
/// @param {Number} $span -
///   The number of grid columns to span.
/// @param {List} $columns -
///   List of columns in the grid.
/// @param {Number} $location [1] -
///   Starting index of a span in a list of columns.
/// @param {Bool} $validate [true] -
///   Check that arguments are valid before proceeding.
///
/// @return {List} -
///   Subset of grid columns based on span and location.
@function su-slice (
  $span,
  $columns,
  $location: 1,
  $validate: true
) {
  @if $validate {
    $columns: su-valid-columns($columns);
    $location: su-valid-location($span, $location, $columns);
  }

  $floor: floor($span);
  $sub-columns: ();

  @for $i from $location to ($location + $floor) {
    $sub-columns: append($sub-columns, nth($columns, $i));
  }

  @if $floor != $span {
    $remainder: $span - $floor;
    $column: $location + $floor;
    $sub-columns: append($sub-columns, nth($columns, $column) * $remainder);
  }

  @return $sub-columns;
}
