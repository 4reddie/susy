// Column math
// ===========


// Su Spread
// ---------
// Returns -1, 0, or 1 for narrow, wide, wider
// - [$spread]    : narrow | wide | wider
@function su-spread (
  $spread: susy-get('spread')
) {
  @if $spread == 'narrow' {
    @return -1;
  } @else if $spread == 'wide' {
    @return 0;
  } @else if $spread == 'wider' {
    @return 1;
  } @else {
    $warn: '$spread must be narrow, wide, or wider';
    @warn $warn + ' Current value [#{$type}]: #{$columns}';
    @return -1;
  }
}


// Is Symmetrical
// --------------
// Returns true if a grid is symmetrical.
// - [$columns]   : <number> | <list>
@function su-is-symmetrical (
  $columns: su-get(columns)
) {
  $columns: su-valid-columns($columns);
  @return if(type-of($columns) == 'number', $columns, null);
}


// Su Count
// ----------
// Find the number of columns in a given layout
// - [$columns]   : <number> | <list>
@function su-count (
  $columns: su-get(columns)
) {
  $columns: su-valid-columns($columns);
  @return su-is-symmetrical($columns) or length($columns);
}


// Su Sum
// --------
// Find the total sum of column-units in a layout
// - [$columns]   : <number> | <list>
// - [$gutters]   : <ratio>
// - [$spread]    : false/narrow | wide | wider
@function su-sum (
  $columns  : su-get('columns'),
  $gutters  : su-get('gutters'),
  $spread   : false
) {
  $columns: su-valid-columns($columns);
  $gutters: su-valid-gutters($gutters);
  $spread: su-spread($spread);

  $gutter-sum: (su-count($columns) + $spread) * $gutters;
  $column-sum: su-is-symmetrical($columns);

  @if not($column-sum) {
    @each $column in $columns {
      $column-sum: ($column-sum or 0) + $column;
    }
  }

  @return $column-sum + $gutter-sum;
}


// su Slice
// ----------
// Return a subset of columns at a given location.
// - $span        : <number>
// - $location    : <number>
// - [$columns]   : <number> | <list>
@function su-slice (
  $span,
  $location,
  $columns: su-get('columns')
) {
  $columns: su-valid-columns($columns);
  $sub-columns: $span;

  @if not(su-is-symmetrical($columns)) {
    $location: $location or 1;
    $sub-columns: ();
    @for $i from $location to ($location + $span) {
      $sub-columns: append($sub-columns, nth($columns, $i));
    }
  }

  @return $sub-columns;
}


// Su
// ----
// Find the sum of a column-span.
// - $span        : <number>
// - $location    : <number>
// - [$columns]   : <number> | <list>
// - [$gutters]   : <ratio>
// - [$spread]    : false/narrow | wide | wider
@function su (
  $span,
  $location     : false,
  $columns      : su-get('columns'),
  $gutters      : su-get('gutters'),
  $spread       : false
) {
  $columns: su-valid-columns($columns);
  $gutters: su-valid-gutters($gutters);
  $span: su-slice($span, $location, $columns);

  @return su-sum($span, $gutters, $spread);
}
