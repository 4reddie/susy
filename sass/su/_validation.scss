// Validation
// ==========
// - su-valid-columns [function]
// - su-valid-gutters [function]
// - su-valid-spread [function]
// - su-valid-span [function]
// - su-valid-column-width [function]
// - su-valid-location [function]


/// Check that a column setting is valid
///
/// @access private
///
/// @param {Number | List} $columns -
///   The number of available columns in the grid
///
/// @return {Number | List} -
///   `$columns` input if valid, otherwise `error`
@function su-valid-columns (
  $columns
) {
  $actual: '[#{type-of($columns)}] #{inspect($columns)}';
  $error: '`#{$actual}` is not a value for $columns '
        + '(must be a unitless number, or list of unitless numbers).';

  @each $col in $columns {
    @if (type-of($col) != 'number') or not unitless($col) {
      @error $error;
    }
  }

  @return $columns;
}


/// Check that a gutter setting is valid
///
/// @access private
///
/// @param {Float} $gutters -
///   The ratio of a gutter to a column
///
/// @return {Number} -
///   `$gutters` if valid, otherwise `error`
@function su-valid-gutters (
  $gutters
) {
  $type: type-of($gutters);

  @if ($type != 'number') or not unitless($gutters) {
    $actual: '[#{$type}] #{inspect($gutters)}';
    @error '`#{$actual}` is not a value for $gutters '
      + '(must be a unitless number).';
  }

  @return $gutters;
}


/// Check that a spread setting is valid and ready for math
///
/// @access private
///
/// @param {String | 0 | 1 | -1} $spread -
///   The spread of an element across edge gutters:
///   either `narrow` (0), `wide` (1), or `wider` (2)
///
/// @return {Number} -
///   Numeric representation of `$spread` value if valid,
///   otherwise `error`
@function su-valid-spread (
  $spread
) {
  $valid-spread: (
    'narrow': -1,
    'wide': 0,
    'wider': 1,
  );

  @if index(0 1 -1, $spread) {
    @return $spread;
  } @else if map-has-key($valid-spread, $spread) {
    @return map-get($valid-spread, $spread);
  }

  @error '`#{$spread}` is not a valid $spread [`narrow` | `wide` | `wider`].';
}


/// Check that a requested span is valid
///
/// @access private
///
/// @param {Number} $span -
///   The number of grid-columns to be spanned
///
/// @return {Integer} -
///   `$span` value if valid, otherwise `error`
@function su-valid-span (
  $span
) {
  $type: type-of($span);

  @if ($type != 'number') or not unitless($span) {
    $actual: '[#{$type}] #{inspect($span)}';
    @error '`#{$actual}` is not a value for $span '
      + '(must be a unitless number).';
  }

  @return $span;
}


/// Check that a column-width setting is valid
///
/// @access private
///
/// @param {Length} $column-width -
///   The width of one column in any CSS units
///
/// @return {Length | Null} -
///   `$columns-width` value if valid, otherwise `error`
@function su-valid-column-width (
  $column-width
) {
  $type: type-of($column-width);

  @if ($type != 'number') or unitless($column-width) {
    $actual: '[#{$type}] #{inspect($column-width)}';
    @error '`#{$actual}` is not a valid value for $column-width '
         + '(must be a length, using any CSS units).';
  }

  @return $column-width;
}


/// Check the location of a column
/// and convert to numeric position if neessary
///
/// @access private
///
/// @param {Number} $span -
///   The number of grid-columns to be spanned
/// @param {Integer | String} $location -
///   The starting (1-indexed) column position of a span
/// @param {Number | List} $columns -
///   The number of available columns in the grid
/// @param {Bool} $validate -
///   Check that arguments are valid before proceeding
///
/// @return {Integer} -
///   Numeric representation of `$location` value if valid,
///   otherwise `error`
@function su-valid-location (
  $span,
  $location,
  $columns,
  $validate: true
) {
  @if $validate {
    $span: su-valid-span($span);
    $columns: su-valid-columns($columns);
  }

  $count: su-count($columns, $validate: false);
  $valid-locations: (
    'first': 1,
    'alpha': 1,
    'last': $count - $span + 1,
    'omega': $count - $span + 1,
  );

  @if $location {
    @if map-has-key($valid-locations, $location) {
      $location: map-get($valid-locations, $location);
    } @else if (type-of($location) != 'number') or not unitless($location) {
      @error '`#{$location}` is not a valid $location keyword '
        + 'or unitless number.';
    }

    @if ($location > $count) {
      @error 'Position `#{$location}` does not exist in grid `#{$columns}`.'
    } @else if ($location + $span - 1 > $count) {
      @error 'There are not enough columns in grid `#{$columns}` '
        + 'for span `#{$span}` at position `#{$location}`';
    }
  } @else if not su-is-symmetrical($columns, $validate: false) {
    @error '$location value is required for asymmetrical grids.';
  }

  @return $location;
}
