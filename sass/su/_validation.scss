// Validation
// ==========
// - su-valid-columns [function]
// - su-valid-gutters [function]
// - su-valid-spread [function]
// - su-valid-location [function]


// Valid Columns
// -------------
/// Check that a `columns` argument is valid.
///
/// @access private
///
/// @param {List} $columns -
///   A list of column-lengths using comparable units.
///
/// @return {List} -
///   `$columns` input as list if valid, otherwise `error`.
@function su-valid-columns (
  $columns
) {
  $first: nth($columns, 1);

  @each $col in $columns {
    @if (type-of($col) != 'number') or (not comparable($col, $first)) {
      $actual: '[#{type-of($columns)}] `#{inspect($columns)}`';
      @error '#{$actual} is not a value for $columns.';
    }
  }

  @return $columns;
}


// Valid Gutters
// -------------
/// Check that a `gutters` argument is valid.
///
/// @access private
///
/// @param {Number} $gutters -
///   The width of a gutter.
///
/// @return {Number} -
///   `$gutters` input if valid, otherwise `error`
@function su-valid-gutters (
  $gutters
) {
  $type: type-of($gutters);

  @if ($type != 'number') {
    $actual: '[#{$type}] `#{inspect($gutters)}`';
    @error '#{$actual} is not a value for $gutters.';
  }

  @return $gutters;
}


// Valid Spread
// ------------
/// Check that a `spread` argument is valid and normalized.
///
/// @access private
///
/// @param {0 | 1 | -1 | 'narrow' | 'wide' | 'wider'} $spread -
///   The spread of a span across gutters (relative to the span):
///   either `narrow` (-1), `wide` (0), or `wider` (1).
///
/// @return {Number} -
///   Numeric representation of `$spread` value if valid,
///   otherwise `error`
@function su-valid-spread (
  $spread
) {
  $valid-spread: (
    'narrow': -1,
    'wide': 0,
    'wider': 1,
  );

  @if index(0 1 -1, $spread) {
    @return $spread;
  } @else if map-has-key($valid-spread, $spread) {
    @return map-get($valid-spread, $spread);
  }

  $actual: '[#{type-of($spread)}] `#{inspect($spread)}`';
  @error '#{$actual} is not a value for $spread.';
}


// Valid Location
// --------------
/// Check that a `location` argument is valid and normalized,
/// given the span and available columns.
///
/// @access private
///
/// @param {Number} $span -
///   The number of grid-columns to be spanned.
/// @param {Integer | String} $location -
///   The starting (1-indexed) column position of a span.
/// @param {List} $columns -
///   A list of columns in the grid.
///
/// @return {Integer} -
///   Numeric representation of `$location` value if valid,
///   otherwise `error`
@function su-valid-location (
  $span,
  $location,
  $columns
) {
  $count: length($columns);
  $valid-locations: (
    'first': 1,
    'alpha': 1,
    'last': $count - $span + 1,
    'omega': $count - $span + 1,
  );

  @if $location {
    @if map-has-key($valid-locations, $location) {
      $location: map-get($valid-locations, $location);
    } @else if (type-of($location) != 'number') or not unitless($location) {
      $actual: '[#{type-of($location)}] `#{$location}`';
      @error '#{$actual} is not a value for $location.';
    }

    @if ($location > $count) {
      @error 'Position `#{$location}` does not exist in grid `#{$columns}`.'
    } @else if ($location + $span - 1 > $count) {
      @error 'There are not enough columns in grid `#{$columns}` '
        + 'for span `#{$span}` at position `#{$location}`';
    }
  }

  @return $location;
}
