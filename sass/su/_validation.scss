/// Check that a column setting is valid
/// 
/// @access private
/// 
/// @param {List | Number} $columns - Columns 
///
/// @return {List | Number | Null} -
///     Return `$column` if valid, or `null`
@function su-valid-columns(
  $columns
) {
  $type: type-of($columns);
  $return: null;

  @if $type == 'number' and unitless($columns) {
    $return: $columns;
  } @else if $type == 'list' {
    $fail: null;
    @each $col in $columns {
      @if type-of($col) == 'number' {
        $fail: $fail or if(unitless($col), null, true);
      } @else {
        $fail: true;
      }
    }
    $return: if($fail, $return, $columns);
  }

  @if $return != $columns {
    $return: null;
    @warn '$columns must be a unitless number or list of unitless numbers. '
        + 'Current value [#{$type}]: #{$columns}';
  }

  @return $return;
}


/// Check that a gutter setting is valid
/// 
/// @access private
/// 
/// @param {List | Number} $gutter - Gutter 
///
/// @return {List | Number | Null} -
///     Return `$gutter` if valid, or `null`
@function su-valid-gutters(
  $gutters
) {
  $type: type-of($gutters);
  $return: null;

  @if $type == 'number' and unitless($gutters) {
    $return: $gutters;
  } @else {
    @warn '$gutters must be a unitless number. '
        + 'Current value [#{$type}]: #{$gutters}';
  }

  @return $return;
}
