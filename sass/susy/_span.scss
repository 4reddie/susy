/// Main span function to compute a column
/// 
/// @access public
/// 
/// @param {List}   $span -
///     Expression to compute the width of the column
/// @param {Float}  $gutters [susy-get('gutters')] -
///     The ratio of a gutter based on a column
/// @param {Length} $column-width [susy-get('column-width')] -
///     The width of a column; only used when `$math` is `static`
/// @param {String} $math [susy-get('math')] -
///     Either `fluid` or `static`
/// @param {String} $spread [susy-get('spread')] -
///     Either `narrow`, `wide` or `wider`
/// 
/// @return {Length} -
///     Return either a value expressed in `%` when `$math` is `fluid` or an absolute length with `$math` is static
///
/// @example scss - Create a half-width column
///   .foo
///     width: susy-span(6 of 12);
///   }
///
/// @example scss - Create a column at specific position
///   .foo {
///     width: susy-span(3 at 6);
///   }
@function susy-span(
  $span,
  $gutters      : susy-get('gutters'),
  $column-width : susy-get('column-width'),
  $math         : susy-get('math'),
  $spread       : susy-get('spread')
) {
  $span-map: susy-span-parser($span);
  $columns: map-get($span-map, 'columns');
  $basis: su(
    map-get($span-map, 'span'),
    map-get($span-map, 'location'),
    $columns, $gutters, $spread
  );

  @if ($math == 'fluid') {
    @return percentage($basis / su-sum($columns, $gutters, $spread));
  }

  @return ($basis * $column-width);
}


/// Internal parser for the span expression
/// 
/// @access private
/// 
/// @param {List} $shorthand -
///     Expression to compute the width of the column
/// 
/// @return {Map} - Return a map with `span`, `location` and `columns` keys
@function susy-span-parser(
  $shorthand
) {
  $span: null;
  $location: null;
  $columns: null;

  @for $i from 1 through length($shorthand) {
    $item: nth($shorthand, $i);

    @if type-of($item) == 'string' {
      @if not index(('at', 'of'), $item) {
        $location: susy-location($item);
      } @else if $item == 'at' {
        $location: nth($shorthand, $i + 1);
      } @else if $item == 'of' {
        $columns: nth($shorthand, $i + 1);
      }
    } @else if type-of($item) == 'number' and not $span {
      $span: $item;
    }
  }

  @return (
    'span': $span,
    'location': $location,
    'columns': $columns,
  );
}


/// Helper to determine the location of a column based on an alias keyword
/// 
/// @access private
/// 
/// @param {Number} $span -
///     TBA
/// @param {String} $location -
///     TBA 
/// @param {Integer} $columns [susy-get('columns')] -
///     Number of columns in the grid
/// 
/// @return {Integer}
@function susy-location(
  $span,
  $location,
  $columns: susy-get('columns')
) {
  $count: su-count($columns);

  @if type-of($location) == 'number' {
    @return $location;
  } @else if index(('first', 'alpha'), $location) {
    @return 1;
  } @else if index(('last', 'omega'), $location) {
    @return $count - $span + 1;
  }

  @error '`#{$location}` is not a valid location.';
}
