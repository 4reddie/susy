// Span Syntax
// ===========

@function susy-span(
  $span,
  $gutters      : susy-get('gutters'),
  $column-width : susy-get('column-width'),
  $math         : susy-get('math'),
  $spread       : susy-get('spread')
) {
  $span-map: susy-span-parser($span);
  $columns: map-get($span-map, 'columns');
  $basis: su(
    map-get($span-map, 'span'),
    map-get($span-map, 'location'),
    $columns, $gutters, $spread
  );

  @if ($math == 'fluid') {
    @return percentage($basis / su-sum($columns, $gutters, $spread));
  }

  @return ($basis * $column-width);
}


@function susy-span-parser(
  $span
) {
  $span: null;
  $location: null;
  $columns: null;

  @for $i from 1 through length($span) {
    $item: nth($span, $i);

    @if type-of($item) == 'string' {
      @if not index(('at', 'of'), $item) {
        $location: susy-location($item);
      } @else if $item == 'at' {
        $location: nth($span, $i + 1);
      } @else if $item == 'of' {
        $columns: nth($span, $i + 1);
      }
    } @else if type-of($item) == 'number' and not $span {
      $span: $item;
    }
  }
}


@function susy-location(
  $span,
  $location,
  $columns: susy-get('columns')
) {
  $count: su-count($columns);

  @if type-of($location) == 'number' {
    @return $location;
  } @else if index(('first', 'alpha'), $location) {
    @return 1;
  } @else if index(('last', 'omega'), $location) {
    @return $count - $span + 1;
  }

  @error '`#{$location}` is not a valid location.';
}
