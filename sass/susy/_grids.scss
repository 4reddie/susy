// Grids
// =====
// - susy-span [function]
// - susy-gutter [function]
// - susy-nested [function]


/// Calculate the width of any grid-span.
/// This is the primary function in Susy,
/// and can be used anywhere you need
/// to span columns on the grid:
/// `width` for grid contents,
/// or `margin` and `padding`
/// to push, pull, and pad your elements.
///
/// @group grids
///
/// @param {List} $span -
///   Shorthand expression to define the width of the span.
///   Contains a unitless number for column-span,
///   'of $n' for available grid columns [optional],
///   'at $n' for location on asymmetrical grids [optional],
///   and 'narrow', 'wide', or 'wider' for defining the spread
///   over available gutters (none, one, or two)
/// @param {Map} $config [()] -
///   Optional map of Susy grid configuration settings
///
/// @return {Length} -
///   Fluid `%` length when no `column-width` is given,
///   or a static length in the same units as `column-width`
///
/// @example scss - Span half the grid
///   .foo
///     width: susy-span(6 of 12);
///   }
///
/// @example scss - Span a specific segment of asymmetrical grid
///   .foo {
///     width: susy-span(3 at 3 of (1 2 3 5 8));
///   }
@function susy-span(
  $span,
  $config: ()
) {
  $input: susy-settings($config, susy-span-parser($span));

  @return su($input...);
}


/// Get the width of a gutter
/// in your current context.
///
/// @group grids
///
/// @param {Number | List} $nested [null] -
///   Optional columns in a nested context
/// @param {Map} $config [()] -
///   Optional map of Susy grid configuration settings
///
/// @return {Length} -
///   The width of a gutter as `%` of current context,
///   or in the units defined by `column-width` when available.
///
/// @example scss - Add gutters before or after an element
///   .foo {
///     margin-left: gutter();
///   }
@function susy-gutter (
  $nested: null,
  $config: ()
) {
  $input: susy-settings($config);
  $gutters: map-get($input, 'gutters');
  $column-width: map-get($input, 'column-width');

  @if $column-width {
    @return $column-width * $gutters;
  }

  $columns: $nested or map-get($input, 'columns');
  $container-spread: map-get($input, 'container-spread');
  $container: su-sum($columns, $gutters, $container-spread);

  @return percentage($gutters / $container);
}


/// Return a subset of asymmetrical columns
/// to use for nesting context.
///
/// @group grids
///
/// @param {List} $span -
///   Shorthand expression to define the width of the subset span.
///   Contains a unitless number for column-span,
///   'at $n', 'first', or 'last' for location on the grid,
///   and optional 'of $n' for available grid columns.
/// @param {Map} $config [()] -
///   Optional map of Susy grid configuration settings
///
/// @return {List} -
///   Subset list of nested asymmetrical columns
///
/// @example scss - Span a specific segment of asymmetrical grid
///   $context: susy-nested(3 at 3 of (1 2 3 5 8)); // returns `(3 5 8)`
@function susy-nested (
  $span,
  $config: ()
) {
  $input: susy-settings($config, susy-span-parser($span));
  $columns: map-get($input, 'columns');
  $location: map-get($input, 'location');

  @if su-is-symmetrical($columns) {
    @error 'The `susy-nested` function is not needed for symmetrical grids';
  } @else if not $location {
    @error 'Asymmetrical grids always require a location.';
  }

  $span: map-get($input, 'span');

  @return su-slice($span, $columns, $location);
}
