// Grids
// =====
// - susy-span [function]
// - susy-gutter [function]
// - susy-nested [function]


/// Calculate the width of any grid-span.
/// This is the primary function in Susy,
/// and can be used anywhere you need
/// to span columns on the grid:
/// `width` for grid contents,
/// or `margin` and `padding`
/// to push, pull, and pad your elements.
///
/// @group grids
///
/// @param {List} $span -
///   Shorthand expression to define the width of the span.
///   Contains a unitless number for column-span,
///   'of $n' for available grid columns [optional],
///   'at $n' for spanning asymmetrical grids [optional],
///   and 'narrow', 'wide', or 'wider' for defining the spread
///   over available gutters (none, one, or two)
/// @param {Map} $config [()] -
///   Optional map of Susy grid configuration settings
///
/// @return {Length} -
///   Return either a fluid `%` value when `math` setting is `fluid`
///   or an explicit length if `math` is static
///
/// @example scss - Span half the grid
///   .foo
///     width: susy-span(6 of 12);
///   }
///
/// @example scss - Span a specific segment of asymmetrical grid
///   .foo {
///     width: susy-span(3 at 3 of (1 2 3 5 8));
///   }
@function susy-span(
  $span,
  $config: ()
) {
  @if length($span) > 1 {
    $span-map: susy-span-parser($span);
    $config: map-merge($config, $span-map);
    $span: map-get($config, 'span');
  }

  $config: susy-settings($config);

  $columns: map-get($config, 'columns');
  $gutters: map-get($config, 'gutters');
  $location: map-get($config, 'location');
  $spread: map-get($config, 'spread');

  $span: su($span, $location, $columns, $gutters, $spread);

  @if (map-get($config, 'math') == 'fluid') {
    $context: map-get($config, 'context');
    $container: su-sum($columns, $gutters, $context);
    @return percentage($span / $container);
  }

  $column-width: map-get($config, 'column-width');
  $column-width: susy-valid-column-width($column-width);
  @return ($span * $column-width);
}


/// Function to compute a gutter for a column
///
/// @group grids
///
/// @param {Integer | List} $nested [null] -
///   Optional columns in a nested context
/// @param {Map} $config [()] -
///   Optional map of Susy grid configuration settings
///
/// @return {Length} -
///   Return a fluid gutter width as `%` of available space
///
/// @example scss - Add gutters before or after an element
///   .foo {
///     margin-left: gutter();
///   }
@function susy-gutter (
  $nested: null,
  $config: ()
) {
  $config: susy-settings($config);
  $gutters: map-get($config, 'gutters');
  $context: map-get($config, 'context');
  $columns: $nested or map-get($config, 'columns');

  $container: su-sum($columns, $gutters, $context);
  @return percentage($gutters / $container);
}


/// Return a subset of asymmetrical columns
/// to use for nesting context.
///
/// @group grids
///
/// @param {List} $span -
///   Shorthand expression to define the width of the subset span.
///   Contains a unitless number for column-span,
///   'at $n', 'first', or 'last' for location on the grid,
///   and optional 'of $n' for available grid columns.
/// @param {Map} $config [()] -
///   Optional map of Susy grid configuration settings
///
/// @return {List} -
///   Return a subset list of asymmetrical columns.
///
/// @example scss - Span a specific segment of asymmetrical grid
///   $context: susy-nested(3 at 3 of (1 2 3 5 8)); // returns `(3 5 8)`
@function susy-nested (
  $span,
  $config: ()
) {
  $local: map-merge($config, susy-span-parser($span));
  $global: susy-settings($local);

  $columns: map-get($global, 'columns');
  $location: map-get($global, 'location');
  $span: map-get($global, 'span');

  @if not $location {
    @error 'Asymmetrical grids always require a location.';
  }

  @if su-is-symmetrical($columns) {
    @error 'The `susy-nested` function is not needed for symmetrical grids';
  }

  @return su-slice($span, $location, $columns);
}
