// Settings
// ========
// - susy [variable]
// - susy-defaults [variable]
// - susy-get [function]


/// Custom user configuration for Susy
///
/// @group a-config
///
/// @type Map
///
/// @see $susy-defaults
///
/// @prop {Number | List} columns [4] -
///   A description of the columns in a grid,
///   their number, realtive sizes (if asymmetrical),
///   and optional static widths
/// @prop {Float} gutters [0.25] -
///   The ratio of a gutter to a column
/// @prop {String} spread ['narrow'] -
///   The spread of an element across adjacent gutters:
///   either `narrow` (none), `wide` (one), or `wider` (two)
/// @prop {String} container-spread ['narrow'] -
///   The spread of a container around adjacent gutters:
///   either `narrow` (none), `wide` (one), or `wider` (two)
///
/// @example scss - All available options (to their default value)
///   $susy: (
///     'columns': 4,
///     'gutters': 0.25,
///     'column-width': null,
///     'spread': 'narrow',
///     'container-spread': 'narrow',
///   );
$susy: () !default;


/// Default configuration map for Susy
///
/// @access private
///
/// @type Map
///
/// @prop {Number | List} columns [4] -
///   A description of the columns in a grid,
///   their number, realtive sizes (if asymmetrical),
///   and optional static widths
/// @prop {Float} gutters [0.25] -
///   The ratio of a gutter to a column
/// @prop {String} spread ['narrow'] -
///   The spread of an element across adjacent gutters:
///   either `narrow` (none), `wide` (one), or `wider` (two)
/// @prop {String} container-spread ['narrow'] -
///   The spread of a container around adjacent gutters:
///   either `narrow` (none), `wide` (one), or `wider` (two)
$susy-defaults: (
  'columns': 4,
  'gutters': 0.25,
  'spread': 'narrow',
  'container-spread': 'narrow',
);


/// Get a combined map of Susy settings
///
/// @group a-config
///
/// @param {Map | Arglist} $overrides... -
///   Optional map override of global configuration settings
///
/// @return {Map} -
///   Combined map of Susy configuration settings, in order of specificity:
///   `$overrides...`, `$susy`, then `$susy-defaults`
@function susy-settings(
  $overrides...
) {
  $settings: map-merge($susy-defaults, $susy);

  @each $config in $overrides {
    $settings: map-merge($settings, $config);
  }

  @return $settings;
}


/// Get the current value of any Susy setting
///
/// @group a-config
///
/// @param {String} $key -
///   Setting to retrieve from the configuration
///
/// @return {*} -
///   Value mapped to `$key` in the configuration maps, in order of specificity:
///   `$susy`, then `$susy-defaults`
@function susy-get(
  $key
) {
  $settings: susy-settings();

  @if not map-has-key($settings, $key) {
    @error 'There is no Susy setting called `#{$key}`';
  }

  @return map-get($settings, $key);
}
