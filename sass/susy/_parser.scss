// Parser
// ======
// - susy-span-parser [function]


/// Internal parser for the span expression
///
/// @access private
///
/// @param {List} $shorthand -
///   Shorthand expression to define the width of the span.
///   Contains a unitless number for column-span,
///   'of $n' for available grid columns [optional],
///   'at $n' for location on asymmetrical grids [optional],
///   and 'narrow', 'wide', or 'wider' for defining the spread
///   over available gutters (none, one, or two)
///
/// @return {Map} -
///   Map of span settings (`span`, `location`, `columns`, and `spread`)
///   parsed from shorthand input
@function susy-span-parser (
  $shorthand
) {
  $options: (
    'first': 'location',
    'last': 'location',
    'alpha': 'location',
    'omega': 'location',
    'narrow': 'spread',
    'wide': 'spread',
    'wider': 'spread',
  );
  $span-error: 'Not able to determine column-span from `#{$shorthand}`';
  $parse-error: 'Unknown span property:';
  $parsed: ();
  $span: null;

  @for $i from 1 through length($shorthand) {
    $item: nth($shorthand, $i);
    $type: type-of($item);

    @if ($type == 'string') {
      @if map-has-key($options, $item) {
        $item: (map-get($options, $item): $item);
        $parsed: map-merge($parsed, $item);
      } @else if not $span {
        @error $span-error;
      } @else if ($item == 'at') {
        $next: nth($shorthand, $i + 1);
        $parsed: map-merge($parsed, ('location': $next));
      } @else if ($item == 'of') {
        $next: nth($shorthand, $i + 1);
        $parsed: map-merge($parsed, ('columns': $next));
      } @else {
        @error '#{$parse-error} #{$item}';
      }
    } @else if ($type == 'number') or ($type == 'list') {
      @if ($type == 'number') and not $span {
        $span: $item;
      } @else if not index(('at', 'of'), nth($shorthand, $i - 1)) {
        @error '#{$parse-error} #{$item}';
      }
    } @else {
      @error '#{$parse-error} #{$item}';
    }
  }

  @if not $span {
    @error $span-error;
  }

  @return map-merge($parsed, ('span': $span));
}
