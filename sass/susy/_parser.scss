// Parser
// ======
// - susy-span-parser [function]
// - susy-location [function]


/// Internal parser for the span expression
///
/// @group x-private
/// @access private
///
/// @param {List} $shorthand -
///     Shorthand for describing the width of a span
///
/// @return {Map} - Return a map with `span`, `location` and `columns` keys
@function susy-span-parser (
  $shorthand
) {
  $options: (
    'first': 'location',
    'last': 'location',
    'alpha': 'location',
    'omega': 'location',
    'narrow': 'spread',
    'wide': 'spread',
    'wider': 'spread',
  );

  $return: (
    'span': null,
    'location': null,
    'columns': null,
    'spread': null,
  );

  @for $i from 1 through length($shorthand) {
    $item: nth($shorthand, $i);

    @if type-of($item) == 'string' {
      @if map-has-key($options, $item) {
        $item: (map-get($options, $item): $item);
        $return: map-merge($return, $item);
      } @else if $item == 'at' {
        $item: ('location': nth($shorthand, $i + 1));
        $return: map-merge($return, $item);
      } @else if $item == 'of' {
        $item: ('columns': nth($shorthand, $i + 1));
        $return: map-merge($return, $item);
      } @else {
        @warn '`#{$item}` is not a valid span property, and will be ignored';
      }
    } @else if type-of($item) == 'number' and not map-get($return, 'span') {
      $return: map-merge($return, ('span': $item));
    }
  }

  $location: susy-location(
    $span: map-get($return, 'span'),
    $location: map-get($return, 'location'),
    $columns: map-get($return, 'columns')
  );

  @return map-merge($return, ('location': $location));
}


/// Determine the location of a column
/// based on an alias keyword
///
/// @group x-private
/// @access private
///
/// @param {Number} $span -
///     TBA
/// @param {String} $location -
///     TBA
/// @param {Integer} $columns [susy-get('columns')] -
///     Number of columns in the grid
///
/// @return {Integer}
@function susy-location (
  $span,
  $location,
  $columns: susy-get('columns')
) {
  $count: su-count($columns);

  @if not $location {
    @return null;
  } @else if type-of($location) == 'number' {
    @return $location;
  } @else if index(('first', 'alpha'), $location) {
    @return 1;
  } @else if index(('last', 'omega'), $location) {
    @return $count - $span + 1;
  }

  @error '`#{$location}` is not a valid location.';
}
