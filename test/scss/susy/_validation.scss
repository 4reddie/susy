// Su Validation Tests
// ===================


// Valid Columns
// -------------
@include test-module('Su Valid Columns [function]') {
  @include test('Fluid columns') {
    @include assert-equal(
      su-valid-columns(1 2 4 2),
      1 2 4 2,
      'A list of unitless numbers is list of fluid columns');
  }

  @include test('Single fluid column') {
    $list: 4;

    @include assert-equal(
      su-valid-columns(4),
      $list,
      'A single unitless number is a single fluid column');
  }

  @include test('Static columns') {
    @include assert-equal(
      su-valid-columns(10cm 200mm 45cm 230mm),
      10cm 200mm 45cm 230mm,
      'A list of comparably-united numbers are a list of static columns');
  }

  @include test('Single static column') {
    $list: 20em;

    @include assert-equal(
      su-valid-columns(20em),
      $list,
      'A single united number is a single static column');
  }
}


// Valid Gutters
// -------------
@include test-module('Su Valid Gutters [function]') {
  @include test('Ratio') {
    @include assert-equal(
      su-valid-gutters(0.75),
      0.75,
      'A unitless number is a valid setting for gutters');
  }

  @include test('Length') {
    @include assert-equal(
      su-valid-gutters(3cm),
      3cm,
      'Any length is a valid setting for gutters');
  }
}


// Valid Spread
// ------------
@include test-module('Su Valid Spread [function]') {
  @include test('Keyword spread') {
    @include assert-equal(
      su-valid-spread('wider'),
      1,
      'Keyword is converted to a number for grid-math');
  }

  @include test('Numeric spread') {
    @include assert-equal(
      su-valid-spread(-1),
      -1,
      'Valid number is returned directly');
  }
}


// Valid Location
// --------------
@include test-module('Su Valid Location [function]') {
  @include test('Numeric column position') {
    @include assert-equal(
      su-valid-location(2, 3, 1 2 3 5 8),
      3,
      'Valid position returns unchanged');
  }

  @include test('Initial position keyword') {
    @include assert-equal(
      su-valid-location(2, 'first', 2 4 6 8),
      1,
      'Valid initial keyword returns 1');
  }

  @include test('Final position keyword') {
    @include assert-equal(
      su-valid-location(2, 'last', 2 4 6 8),
      3,
      'Final keyword returns calculated position from end');
  }
}
