/* # Su Valid Columns [function] ---------- */
/* Symmetrical grids */
[data-module="Su Valid Columns [function]"] [data-test="Symmetrical grids"] .assert-equal {
  -result: PASS;
  -description: "A unitless number is a valid setting for columns"; }

/* Asymmetrical grids */
[data-module="Su Valid Columns [function]"] [data-test="Asymmetrical grids"] .assert-equal {
  -result: PASS;
  -description: "A list of unitless numbers is a valid setting for columns"; }

/* # Su Valid Gutters [function] ---------- */
/* Unitless float */
[data-module="Su Valid Gutters [function]"] [data-test="Unitless float"] .assert-equal {
  -result: PASS;
  -description: "A unitless number is a valid setting for gutters"; }

/* # Su Valid Spread [function] ---------- */
/* Keyword spread */
[data-module="Su Valid Spread [function]"] [data-test="Keyword spread"] .assert-equal {
  -result: PASS;
  -description: "Keyword is converted to a number for grid-math"; }

/* Number spread */
[data-module="Su Valid Spread [function]"] [data-test="Number spread"] .assert-equal {
  -result: PASS;
  -description: "Valid number is returned directly"; }

/* # Su Valid Span [function] ---------- */
/* Unitless float */
[data-module="Su Valid Span [function]"] [data-test="Unitless float"] .assert-equal {
  -result: PASS;
  -description: "A unitless number is a valid setting for span"; }

/* # Su Valid Column Width [function] ---------- */
/* Length in any units */
[data-module="Su Valid Column Width [function]"] [data-test="Length in any units"] .assert-equal {
  -result: PASS;
  -description: "Valid length returns unchanged"; }

/* # Su Valid Location [function] ---------- */
/* Numeric column position */
[data-module="Su Valid Location [function]"] [data-test="Numeric column position"] .assert-equal {
  -result: PASS;
  -description: "Valid position returns unchanged"; }

/* Initial position keyword */
[data-module="Su Valid Location [function]"] [data-test="Initial position keyword"] .assert-equal {
  -result: PASS;
  -description: "Valid initial keyword returns 1"; }

/* Final position keyword */
[data-module="Su Valid Location [function]"] [data-test="Final position keyword"] .assert-equal {
  -result: PASS;
  -description: "Final keyword returns calculated position from end"; }

/* No location given for symmetrical grid */
[data-module="Su Valid Location [function]"] [data-test="No location given for symmetrical grid"] .assert-equal {
  -result: PASS;
  -description: "Null location is valid for symmetrical grids"; }

/* # Su [function] ---------- */
/* Fluid */
[data-module="Su [function]"] [data-test="Fluid"] .assert-equal {
  -result: PASS;
  -description: "Returns fluid span if no column-width is given"; }

/* Static */
[data-module="Su [function]"] [data-test="Static"] .assert-equal {
  -result: PASS;
  -description: "Returns static span in same units as column-width"; }

/* # Su Span [function] ---------- */
/* Symmetrical */
[data-module="Su Span [function]"] [data-test="Symmetrical"] .assert-equal {
  -result: PASS;
  -description: "Symmetrical output is equal to the column-sum of the span"; }

/* Asymmetrical */
[data-module="Su Span [function]"] [data-test="Asymmetrical"] .assert-equal {
  -result: PASS;
  -description: "Asymmetrical output is equal to the column-sum of a subset slice"; }

/* # Su Count [function] ---------- */
/* Count the columns in a symmetrical grid */
[data-module="Su Count [function]"] [data-test="Count the columns in a symmetrical grid"] .assert-equal {
  -result: PASS;
  -description: "Input and output should be the same."; }

/* Count the columns in an asymmetrical grid */
[data-module="Su Count [function]"] [data-test="Count the columns in an asymmetrical grid"] .assert-equal {
  -result: PASS;
  -description: "Output should equal list length."; }

/* # Su Sum [function] ---------- */
/* Calculate the total units in a symmetrical grid */
[data-module="Su Sum [function]"] [data-test="Calculate the total units in a symmetrical grid"] .assert-equal {
  -result: PASS;
  -description: "Returns combined column and gutter units"; }

/* Calculate the total units in an asymmetrical grid */
[data-module="Su Sum [function]"] [data-test="Calculate the total units in an asymmetrical grid"] .assert-equal {
  -result: PASS;
  -description: "Returns combined column and gutter units"; }

/* Handle fraction spans */
[data-module="Su Sum [function]"] [data-test="Handle fraction spans"] .assert-equal {
  -result: PASS;
  -description: "No fractional gutters are added to fraction spans"; }

/* Handle fraction spans > 1 */
[data-module="Su Sum [function]"] [data-test="Handle fraction spans > 1"] .assert-equal {
  -result: PASS;
  -description: "No fractional gutters are added to fraction spans"; }

/* # Su Slice [function] ---------- */
/* Slice an asymmetrical grid */
[data-module="Su Slice [function]"] [data-test="Slice an asymmetrical grid"] .assert-equal {
  -result: PASS;
  -description: "Returns subset of asymmetrical columns based on span and location"; }

/* Slice an asymmetrical grid with fractions */
[data-module="Su Slice [function]"] [data-test="Slice an asymmetrical grid with fractions"] .assert-equal {
  -result: PASS;
  -description: "Slice a fraction of an asymmetrical column"; }

/* # Su Is Symmetrical [function] ---------- */
/* Symmetrical */
[data-module="Su Is Symmetrical [function]"] [data-test="Symmetrical"] .assert-true {
  -result: PASS;
  -description: "Numbers represent a symmetrical grid"; }

/* Asymmetrical */
[data-module="Su Is Symmetrical [function]"] [data-test="Asymmetrical"] .assert-false {
  -result: PASS;
  -description: "Lists of numbers represent an asymmetrical grid"; }

/* Asymmetrical [one-column] */
[data-module="Su Is Symmetrical [function]"] [data-test="Asymmetrical [one-column]"] .assert-false {
  -result: PASS;
  -description: "Single-item lists represent a (dumb) asymmetrical grid"; }

/* # Susy Settings [function] ---------- */
/* Default configuration */
[data-module="Susy Settings [function]"] [data-test="Default configuration"] .assert-equal {
  -result: PASS;
  -description: "Returns merged map of Susy default config settings"; }

/* Configuration overrides */
[data-module="Susy Settings [function]"] [data-test="Configuration overrides"] .assert-equal {
  -result: PASS;
  -description: "Returns merged map of Susy defaults with custom overrides"; }

/* # Susy Get [function] ---------- */
/* Get value from user settings */
[data-module="Susy Get [function]"] [data-test="Get value from user settings"] .assert-equal {
  -result: PASS;
  -description: "Susy-get and map-get should return the same value"; }

/* Get falsey value from user settings */
[data-module="Susy Get [function]"] [data-test="Get falsey value from user settings"] .assert-equal {
  -result: PASS;
  -description: "Susy-get and map-get should return the same value"; }

/* Get value from defaults */
[data-module="Susy Get [function]"] [data-test="Get value from defaults"] .assert-equal {
  -result: PASS;
  -description: "Susy-get and map-get should return the same value"; }

/* # Susy Span Parser [function] ---------- */
/* Simple grid span */
[data-module="Susy Span Parser [function]"] [data-test="Simple grid span"] .assert-equal {
  -result: PASS;
  -description: "A single unitless number is returned as span only"; }

/* Span with symmetrical columns */
[data-module="Susy Span Parser [function]"] [data-test="Span with symmetrical columns"] .assert-equal {
  -result: PASS;
  -description: "Span and symmetrical columns are properly mapped"; }

/* Span with spread */
[data-module="Susy Span Parser [function]"] [data-test="Span with spread"] .assert-equal {
  -result: PASS;
  -description: "Span and spread are properly mapped"; }

/* Span with location and asymmetrical columns */
[data-module="Susy Span Parser [function]"] [data-test="Span with location and asymmetrical columns"] .assert-equal {
  -result: PASS;
  -description: "Span, location, and asymmetrical columns are properly mapped"; }

/* Span with keyword location */
[data-module="Susy Span Parser [function]"] [data-test="Span with keyword location"] .assert-equal {
  -result: PASS;
  -description: "Span, keyword location, and columns are properly mapped"; }

/* # Susy Span [function] ---------- */
/* Simple span */
[data-module="Susy Span [function]"] [data-test="Simple span"] .assert-equal {
  -result: PASS;
  -description: "Simple span is calculated correctly using defaults"; }

/* Span with location */
[data-module="Susy Span [function]"] [data-test="Span with location"] .assert-equal {
  -result: PASS;
  -description: "Span with location is calculated correctly using column defaults"; }

/* Span with spread */
[data-module="Susy Span [function]"] [data-test="Span with spread"] .assert-equal {
  -result: PASS;
  -description: "Spread adds gutter width to usual span"; }

/* Static math */
[data-module="Susy Span [function]"] [data-test="Static math"] .assert-equal {
  -result: PASS;
  -description: "Static math returns length based on column-width"; }

/* # Susy Gutter [function] ---------- */
/* Fluid gutters */
[data-module="Susy Gutter [function]"] [data-test="Fluid gutters"] .assert-equal {
  -result: PASS;
  -description: "Gutters are calculated as a percentage of context"; }

/* Static gutters */
[data-module="Susy Gutter [function]"] [data-test="Static gutters"] .assert-equal {
  -result: PASS;
  -description: "Gutters are calculated as a fraction of column-width"; }

/* Gutters with custom config */
[data-module="Susy Gutter [function]"] [data-test="Gutters with custom config"] .assert-equal {
  -result: PASS;
  -description: "Gutters account for custom configuration"; }

/* # Susy Nested ---------- */
/* Asymmetrical slicing */
[data-module="Susy Nested"] [data-test="Asymmetrical slicing"] .assert-equal {
  -result: PASS;
  -description: "Returns a sub-slice of asymmetrical columns"; }

/* # Unprefix Plugin ---------- */
/* Span */
[data-module="Unprefix Plugin"] [data-test="Span"] .assert-equal {
  -result: PASS;
  -description: "Unprefixed span() returns same result as susy-span()"; }

/* Gutter */
[data-module="Unprefix Plugin"] [data-test="Gutter"] .assert-equal {
  -result: PASS;
  -description: "Unprefixed gutter() returns same result as susy-gutter()"; }

/* Nested */
[data-module="Unprefix Plugin"] [data-test="Nested"] .assert-equal {
  -result: PASS;
  -description: "Unprefixed nested() returns same result as susy-nested()"; }

/* # SUMMARY ---------- */
/* 47 Tests: */
/*  - 47 Passed */
/*  - 0 Failed */
/* -------------------- */

/*# sourceMappingURL=test.css.map */
